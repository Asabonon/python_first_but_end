"""
Тернарный оператор
Определение:
    тернарный (ternarius — «тройной») оператор — операция, 
        возвращающая свой первый или третий операнд 
        в зависимости от значения логического выражения, 
        заданного вторым операндом.
        результат 1 если выражение_истинно, иначе результат 2

Применение
    вместо конструкции if … else, в которой нет elif
    позволяет писать компактный и читаемый код

Синтаксис
    name = 'Max' if is_has_name else 'Empty'
    number = 1 if is_one else 2
    print('Привет' if is_russian else 'Hello')
    в общем виде: результат1 если условие иначе результат2

Примеры использования
    От if к тернарному оператору
    слово -> СлОвО
    сразу пишем тернарный оператор
    проверка пароля пользователя

#############  
word = 'слово'
result = []

for i in range(len(word)):
    letter = word[i].upper() if i%2 == 0 else word[i].lower()
    result.append(letter)

result = ''.join(result)
print(result)

password = input('Введите пароль ')
print('Войти' if password == 'secret' else 'Вход запрещен')

#############  

Генераторы списков и словарей

Определение
    В Python существует специальная синтаксическая конструкция, 
     которая позволяет по определенным правилам создавать 
     заполненные списки. Такие конструкции называются генераторами списков.
     Генераторы словарей можно определить по аналогии.


Применение
    вместо цикла for
    позволяет писать компактный и читаемый код
    работают быстрее

Синтаксис
    [ number for number in numbers if number > 0 ]

#############  
numbers = [1, 2, 3, 4, 5, -1, -2, -3]
result = [number for number in numbers if number > 0]
print(result) # [1, 2, 3, 4, 5]

pairs = [(1, 'a'), (2, 'b'), (3, 'c')]
result = {pair[0]: pair[1] for pair in pairs}
print(result) # {1: 'a', 2: 'b', 3: 'c'}
#############  

Преимущества
    компактный и читаемый код
    скорость

Недостатки
    Нельзя заменить очень сложные конструкции.
    При неправильном использовании могут ухудшить читаемость.

Примеры
    Создать список из случайных чисел от 1 до 100.
    Создать список квадратов чисел.
    Создать список имен на букву А.

#############  
import random

numbers = [random.randint(1, 100) for i in range(10)]
print(numbers)

numbers = [1, 2, 3, -4]
numbers = [number**2 for number in numbers]
print(numbers)

names = ['Руслан', 'Дмитрий', 'Алексей', 'Андрей']
names = [name for name in names if name[0] == 'А']
names = [name for name in names if name.startswith('А')]
print(names)
#############  

Принципы работы операторов and и or

Приведение типов к bool в Python
    Все встроенные типы данных в Python приводятся к логическому типу bool
     по определенным правилам:
    Истина: 'abc', [1], (1,), {1:'a'}, 10, 1.1, ...
    Ложь: '', [], (), {}, 0, None, ...

Стиль записи логических выражений
    Из-за данного преобразования типов в Python желательно использовать 
    лаконичный стиль записи логических выражений:
    Вместо if len(str_var) > 0: ...
    Пишем: if str_var: ...
    Это ускоряет разработку и делает код более читаемым.

Как работает and
    Оператор and не проверяет следующее логическое выражение, 
     если текущее False (ленивый).
    Оператор and возвращает первый ложный элемент или последний истинный.

##########################  
print([1] and [] and '' and 1) # вывод: []
print([1] and [20] and 'd' and 13) # вывод: 13
##########################  

Как работает or
    Оператор or не проверяет следующее логическое выражение, 
     если текущее True (ленивый).
    Оператор or возвращает первый истинный элемент или последний ложный.

Примеры применения
    and: извлечение квадратного корня из отрицательного числа
    or: сохранение в переменную одного из 2-х значений

Модуль copy

Хранение списков в памяти
    При работе со списками стоит помнить, 
     что если мы переприсваиваем список в другую переменную a = b 
     и меняем значения внутри нового списка b[1], 
     значения изменятся и внутри старого списка a[1], 
     т.к. ссылки на элементы списка остаются на своих местах в памяти 
     и каждый список использует одни и те же элементы.


Изменение элементов списка в функции
    При передаче списка параметром в функцию нужно быть 
     особенно внимательными: 
     функция может изменить элемент списка внутри основной программы.


Методы копирования списка
    Создание среза от начала и до конца списка my_list[:]. 
    # b = a[:]
    Метод copy у самого списка.
    # b = a.copy()

Модуль copy
    Применяется для полного (глубокого) копирования списка.
    Используется функция deepcopy.
    b = copy.deepcopy(a).

#############
import copy

a = [1, 2, [1, 2]]

b = copy.deepcopy(a)
b[2][1] = 200
print(a) # не  изменился от b
#############

Обработка исключений

Исключительная ситуация
    Во время выполнения программы могут возникать ситуации, 
     когда состояние внешних данных, устройств ввода-вывода 
     или компьютерной системы в целом делает дальнейшие вычисления 
     в соответствии с базовым алгоритмом невозможными или бессмысленными.

Классические примеры
    Деление на 0
    Ошибка чтения данных при отсутствии доступа к ресурсу
    ...

Обработка исключений

Что делать при возникновении исключительной ситуации?
    Как определить, произошла исключительная ситуация 
     или программа работает в нормальном режиме?
    Python имеет встроенный механизм обработки исключений.

Обработка исключений
try:
    Блок с возможной исключительной ситуацией.
except:
    Код, который выполняется при возникновении исключительной ситуации.

Перехват конкретных исключений

В Python каждая исключительная ситуация имеет свой тип.
    TypeError, ValueError, ...
    Самое общее исключение имеет тип Exception.
    Рекомендуется обрабатывать конкретные исключительные ситуации 
     и реагировать на разные исключения по-разному.

Информация об ошибке
    Можно получить дополнительную информацию об исключении,
     Если использовать конструкцию except Исключение as e:
    Тогда в переменную e будет сохранен объект исключения.

try - except - else - finally
    Блок try — код, который может вызвать исключение.
    Блок except — что делать при возникновении исключения.
    Блок else — что делать, если исключения не произошло.
    Блок finally — выполняется всегда.

#####################
number = int(input('Введите число '))

try: 
    result = 100 / number
    print('Ошибки нет')
except ZeroDivisionError as e:
    print('Попытка деления на 0')
    print('Доп. инфа: ', e)
except Exception as e:
    print('Неизвестная ошибка')
    print('Доп. инфа: ', e)
    
print('Конец')
#####################

Генерация исключений
    Иногда требуется не обработать а, наоборот, 
     создать исключительную ситуацию.
    Это можно сделать с помощью команды raise: 
    raise Exception('Что то пошло не так').

#####################    
print('Начало')
raise Exception('Что-то пошло не так')
print('Конец')
#####################
"""
""" Решить с помощью генераторов списка.

1: Даны два списка фруктов. 
Получить список фруктов, присутствующих в обоих исходных списках.
    Примечание: Списки фруктов создайте вручную в начале файла. """

""" fruits_1 = ['apple', 'banana', 'orange', 'kiwi', 'pear']
fruits_2 = ['banana', 'kiwi', 'tangerine']
result = [fruit for fruit in fruits_1 if fruit in fruits_2]
print(result) # ['banana', 'kiwi'] """

""" 2: Дан список, заполненный произвольными числами. Получить список из элементов исходного, удовлетворяющих следующим условиям:
Элемент кратен 3,
Элемент положительный,
Элемент не кратен 4. """
""" import random
numbers = [random.randint(-100, 100) for i in range(20)]
print(numbers) """
""" numbers = [-90, 95, 15, 79, -45, -95, -91, -14, 93, 13, -29, -55, 56, -35, -35, -90, 14, 62, 41, 5]
result = [number for number in numbers if number % 3 == 0 and number > 0 and number % 4 != 0]
print(result) """

""" 3. Напишите функцию которая принимает на вход список. 
Функция создает из этого списка новый список из квадратных корней чисел 
(если число положительное) и самих чисел (если число отрицательное) 
и возвращает результат (желательно применить генератор 
и тернарный оператор при необходимости). 
В результате работы функции исходный список не должен измениться.
Например:
old_list = [1, -3, 4]
result = [1, -3, 2]

Примечание: Список с целыми числами создайте вручную в начале файла. 
Не забудьте включить туда отрицательные числа. 
10-20 чисел в списке вполне достаточно. """

""" import math
old_list = [0, 7, 1, -9, -7, 4, 8, -10, -2, 9]

def new_sqrt_list(input_list):
    result = [math.sqrt(number) if number > 0 else number for number in input_list ]
    return result

result = new_sqrt_list(old_list)
print(result)
print(old_list) """


""" 4. Написать функцию которая принимает на вход число от 1 до 100. 
Если число равно 13, функция поднимает исключительную ситуации ValueError 
иначе возвращает введенное число, возведенное в квадрат.
Далее написать основной код программы. 
Пользователь вводит число. 
Введенное число передаем параметром в написанную функцию 
и печатаем результат, который вернула функция. 
Обработать возможность возникновения исключительной ситуации, 
которая поднимается внутри функции. """

""" def unlucky_number(number):
    if number == 13:
        raise ValueError('Несчастливое число')
    else:
        return number ** 2

number = int(input('Введите число '))

try:
    result = unlucky_number(number)
except ValueError:
    print('Вы ввели 13')
else:
    print(result) """